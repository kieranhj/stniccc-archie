STNICCC Acorn Archimedes Port
~~~

Initial speed test.
A3020 = &1E89 vsyncs = 156.34s = 11.5fps
A3000 = &2B86 vs = 222.84s = 8.1 fps

Store word in middle of plot_span loop
A3020 = 5565 vs = 111.3s = 16.2fps
A3000 = 7957 vs = 159.14s = 11.3fps

Amiga OCS = 6042vs = 120.84s = 14.9fps

(Wire frame version runs at exactly 25Hz.)

Clear screen w/ 8 registers
A3020 = &14A4 = 5284 = 105.68s = 17fps
A3000 = 7477 = 149.54s = 12fps

Target = 5454 (&154E) vs for 15fps w/ music on A3000
A3020 target = 3636

Simplify drawline into span buffer loop
A3020 = 4641

Handle short spans of <=9 pixels as masks
A3020 = 4514

Handle long span as mask + words + mask
A3020 = 4232
A3000 = 6019 = 15fps

Unroll 40x span fns to plot w/ 5x words at a time
A3000 = 5903 = 15.2fps
A3020 = 4075 = 22.1fps

Only clear the window not the entire screen
A3000 = 5821 = 15.46fps

No debug vsync
A3020 = 4009
A3000 = 5749

Move to 4 word plot with 4x registers held
A3020 = 3967 = 22.7fps
A3000 = 5686 = 15.8fps

Alternative to Bresenham?
Compute dx/dy
dx = endx - startx
dy = endy - starty [0-255]

Table of 1/dy in .16 format
Foreach y from y0 to y1
x += dx/dy

Remove vertex copying for indexed polys
A3020 = 3886, weird now getting 3976?
A3000 = 5643

Real hw A3020 = &f95 = 3989
Real hw A3020 w/ music = &1140 = 4416
Music overhead ~10.7%
Project A3000 w/ music = 6246 = 14.4fps...

Triple buffering!!!
A3020 = 3075 = 29.3 fps! 
A3000 = 4751 = 18.9 fps!
(Wireframe A3020 = 40.6fps!!)

VSync frame swap from Sarah (for ARM3 etc.)
A3020 = 3123 = 28.8 fps
A3000 = 4771 = 18.9 fps
ARM3 = 49.4fps!

TODO
- Fix palette - DONE
- Centre screen
- Music
- Decide intro/outro

RAM!
On A3000 w/ 1Mb:
- Next 640k
- Free 64k
- Screen 80k
- System 32k <= fixed
- Heap 32k <= fixed
- Module 112k
- Font cache 32k <= can be reduced to 0

Overhead = 208k!!
Require = 625k stream data, 146k MOD, 62k QTM, screen = 120k
Code = 7k..
Wimpslot = 625+146+7=

Sarah says - don't expect more than 816K of usable RAM on a 1Mb machine. :(


26/5/2020
~~~
If STNICCC is too passe, how about remixing it?
Use encoder.py to spit out the offset of each frame in the sequence.
And a palette number to use - maximum of 108 palette changes.
Move to 2Mb and store data uncompressed as per before.
Can then render any frame on demand, so can go forwards, backwards etc.
Also have access to the current palette so can lerp to other colours.
E.g. desaturate to b&w in reverse, super saturate, simulate lighting
or disco colours etc.
Perhaps sequence this to some new music from Rhino?

Assemble the scene from the polys somehow?

To B&W:
R*0.25 + G*0.5 + B*0.25 is a fast approximation.
r>>2 + g>>1 + b>>2

Using per-frame rendering &
Enable music with lower sample rate.
A3000 w/ music = &1657 vsyncs (played backwards) ~= 15.7fps.

Flow for NOVA compofiller
~~~
1. Fade up title screen
2. Fade out
3. Play sequence backwards in colour
4. Fade out
5. Show simple timer?
6. Fade in b&w first frame
7. Play forwards in b&w, increasing in speed
8. White out on last frame
9. Fade up outro card
10. Fade out outro card

TODO
~~~
1. Get basic flow working: screen > backwards > time > forwards inc. in speed > screen
   => Load images from disc to save time/space - done
2. Add screen fades
3. Add b&w palette to fwd playback - done
4. Load scene1.bin from disc (show that it's original data) - done
5. Load MOD from disc - done
6. Build process to make !folder - done
7. Memory nonsense - compress images or meh?
8. Polish - centre screen, timings etc.
9. Icon, readmes etc.

A3000 w/ 4ch checknobankh music = &1638 = 5688

A3000 w/out music = &139c = 5020
A3000 w/ 4ch test = &15FE = 5630 = +610
A3000 w/ 6ch test = &17AF = 6063 = +433
A3000 w/ 8ch test = &1952 = 6482 = +419

New 'seat of the pants' plan
~~~
1. Ability to display images or text pages as slides at any point during the sequence
2. Some simple way of specifying the sequence on a tracker line

State of the demo.
1. Playing the sequence, stepping N frames each update. Palette modifier optional.
2. Displaying a static image, for N tracker lines/vsyncs. Source of static image could be text page or decompress.
