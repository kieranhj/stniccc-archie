STNICCC Acorn Archimedes Port
~~~

Initial speed test.
A3020 = &1E89 vsyncs = 156.34s = 11.5fps
A3000 = &2B86 vs = 222.84s = 8.1 fps

Store word in middle of plot_span loop
A3020 = 5565 vs = 111.3s = 16.2fps
A3000 = 7957 vs = 159.14s = 11.3fps

Amiga OCS = 6042vs = 120.84s = 14.9fps

(Wire frame version runs at exactly 25Hz.)

Clear screen w/ 8 registers
A3020 = &14A4 = 5284 = 105.68s = 17fps
A3000 = 7477 = 149.54s = 12fps

Target = 5454 (&154E) vs for 15fps w/ music on A3000
A3020 target = 3636

Simplify drawline into span buffer loop
A3020 = 4641

Handle short spans of <=9 pixels as masks
A3020 = 4514

Handle long span as mask + words + mask
A3020 = 4232
A3000 = 6019 = 15fps

Unroll 40x span fns to plot w/ 5x words at a time
A3000 = 5903 = 15.2fps
A3020 = 4075 = 22.1fps

Only clear the window not the entire screen
A3000 = 5821 = 15.46fps

No debug vsync
A3020 = 4009
A3000 = 5749

Move to 4 word plot with 4x registers held
A3020 = 3967 = 22.7fps
A3000 = 5686 = 15.8fps

Alternative to Bresenham?
Compute dx/dy
dx = endx - startx
dy = endy - starty [0-255]

Table of 1/dy in .16 format
Foreach y from y0 to y1
x += dx/dy

Remove vertex copying for indexed polys
A3020 = 3886, weird now getting 3976?
A3000 = 5643

Real hw A3020 = &f95 = 3989
Real hw A3020 w/ music = &1140 = 4416
Music overhead ~10.7%
Project A3000 w/ music = 6246 = 14.4fps...

Triple buffering!!!
A3020 = 3075 = 29.3 fps! 
A3000 = 4751 = 18.9 fps!
(Wireframe A3020 = 40.6fps!!)

VSync frame swap from Sarah (for ARM3 etc.)
A3020 = 3123 = 28.8 fps
A3000 = 4771 = 18.9 fps
ARM3 = 49.4fps!

TODO
- Fix palette - DONE
- Centre screen
- Music
- Decide intro/outro

RAM!
On A3000 w/ 1Mb:
- Next 640k
- Free 64k
- Screen 80k
- System 32k <= fixed
- Heap 32k <= fixed
- Module 112k
- Font cache 32k <= can be reduced to 0

Overhead = 208k!!
Require = 625k stream data, 146k MOD, 62k QTM, screen = 120k
Code = 7k..

Sarah says - don't expect more than 816K of usable RAM on a 1Mb machine. :(

Could squeeze screens to 96k = 3 * 32k by using 256x200 resolution
Need to fit player and MOD into ~100K :\

Removing 64k alignment from stream data only saves ~2K.

First run w/ Exo at 8K buffer
A3030 = 4052 = +929 frames! = 22.2 fps
A3000 = 6337 = +1566 frames! = 14.2 fps

Size inc buffer = 477287 bytes = 466.1K
Original = 639976 bytes = 625K
Saving 162689 bytes = 158.9K

TODOs:
- Load context with LDM
- Jump table for switch - DONE
- Inline read_byte - DONE
- Inline rotate bits - DONE
- Read decrunched data from window
- Switch(length) as table

A3020 = 3853 = 23.4 fps
A3000 = 5939 = 15.2 fps - Doh! Need 11% more for music!

Read out of window
A3020 = 3756 = 24.0 fps
RTW suggests reordering the bitstream so lsb first - can just mask in ARM

Sensible read out of window
A3020 = 3710 = 24.2 fps
A3000 = 5717 = 15.7 fps

LDM/STM for Exo context:
A3020 = 3662

Inner loop for byte decompress
A3020 = 3546 = 25.3fps
A3000 = 5456 = 16.5fps?!

A3000 w/ music = 6726 = 13.4 fps :(
A3000 w/ music @ 48us = 6216 = 14.5 fps = 13.9% slower w/ music wtf?
A3020 w/ music @ 48us = 3823 = 23.5 fps = 7.8% slower w/ music

read_bits(bit_count)

shifts by N = bit_count & 7 places (1 <= N <= 7)
returns (bit_buffer << N) & 0x7f00 >> N
Optional byte copy

bit_buffer = abcdefgh
next_byte =  stuvwxyz

iteration 1: 0000000a bcdefgh0 -> 0000000s tuvwxyz1 
iteration 2: 000000ab cdefgh00 -> 000000as tuvwxyz1
iteration 3: 00000abc defgh000 -> 00000abs tuvwxyz1
iteration 4: 0000abcd efgh0000 -> 0000abcs tuvwxyz1
iteration 5: 000abcde fgh00000
iteration 6: 00abcdef gh000000
iteration 7: 0abcdefg h0000000

Return HI byte after N shifts

However!
If at any point the LO byte == 0 then
refill the low byte from the stream and do the shift again,
this time moving a 1 into the lowest bit

Rotate Left w/ Carry is ADCS r0,r0,r0
bit_buffer + 0xffffffff will set carry for everything except 0
0 - bit_buffer will set carry for only 0

Inline read_bits for static bit_count:
A3020 w.out music = 3431 = 26.2 fps (+53%)
A3000 w.out music = 5251 = 17.1 fps
Sarah says A3020 should be 54.4% faster than A3000!

A3000 w/ music = 6057 = 14.86 fps... 15% overhead for music wtf!?
A3020 w/ music = 3728 = 24.1 fps... 8.7% overhead

A3000 w/ music but no RMCLEAR = 5968 = 15.08 fps ?!
Makes no sense. Need to try real hw. Now can't repro. Red herring?
Interrupts maybe?

Tweaked alignment of unrolled loops
A3000 w/ music = 6009 = 14.98 fps
A3020 w/ music = 3652 = 24.6 fps ~64% faster?!
